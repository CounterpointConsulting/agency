
ConversationHistory conversation = new ConversationHistory();
ChatPromptGenerator prompt = new ChatWithLastMessagesPrompt(conversation, 10);

final Scanner stringScanner = new Scanner(System.in);
System.out.println("What is my role?");
final ChatMessage systemMessage = new ChatMessage(ChatMessageRole.SYSTEM.value(), stringScanner.nextLine());
conversation.getMessages().add(systemMessage);

while(true) {
	System.out.println("\n\nWhat would you like me to do?");
	String userInput = stringScanner.nextLine();
	final ChatMessage userMessage = new ChatMessage(ChatMessageRole.USER.value(), userInput);
	
	if("".equals(userInput)) {
		break;
	}
	
	conversation.getMessages().add(userMessage);
        
    ChatCompletionRequest chatCompletionRequest = ChatCompletionRequest
            .builder()
            .model("gpt-3.5-turbo")
            .messages(conversation.getMessages())
            .n(1)
            .logitBias(new HashMap<>())
            .build();

    StringBuilder sb = new StringBuilder();
    
    service.streamChatCompletion(chatCompletionRequest)
            .doOnError(Throwable::printStackTrace)
            .blockingForEach((x) -> { 
                if(x.getChoices().size() > 0 && x.getChoices().get(0).getMessage().getContent() != null)
                    sb.append(x.getChoices().get(0).getMessage().getContent()); 
            });
    
    System.out.println("Response: " + sb.toString());
    
    final ChatMessage aiMessage = new ChatMessage(ChatMessageRole.ASSISTANT.value(), sb.toString());
    conversation.getMessages().add(aiMessage);
        
}
